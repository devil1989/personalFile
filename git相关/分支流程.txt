feature/classstatic_20180505:基于develop拉出来的单一项目开发分支：分支测试环境，开发完成进入分支测试前，打上分支测试的tag在进行测试【git有打tag的功能】
develop：大家通用的开发项目拷贝代码，都从这里拷贝；所有下一期要上线的项目，都基于这个分支拉代码；自己分支开发完成，分支测试完成以后，才合并到develop：qa测试环境【合并到develop的时候，打qa的tag】
release/classstatic_20180505：每个版本发布都会有一个对应的线上分支，这个线上分支就指向线上代码，不同的后缀代表不同的发布日期，这样线上出问题才可以回滚代码：yz测试环境，测试过了就“发布”
		              不同release分支，用于回滚
master：线上最新代码的克隆（虽然和线上保持一致，但是线上用的不是master的代码，而是release分支的代码）


一般工作流程：
	1.初期master，develop，最新release分支，这三个内部代码保持同步

	2.基于develop拉分支开发；自己开发的分支，作为分支测试，开发完成，测试完成以后，rebase最新develop，合并到develop，并且给分支develop分支打tag标签，表示进入qa测试
	  qa测试用的是develop分支，每个功能分支测试完成以后，合并到develop都要打qa测试的标签，表示键入这个qa测试流程。
                   所以，从develop上拉到的，都是已经开发好且“分支测试”通过的代码
	
	3.develop的qa环境，下版本要上的很多项目都在里面，这个阶段bug很少了，qa测试的时候，如果出现bug，是哪个项目的，就到那个项目的“开发分支”分支上修改代码，
                   是开发分支遗漏的bug就继续在开发分支修改，然后测试；如果是测试环境特有的bug【一般非常少】，那就在开发分支修改好以后，合并到develop重新进入qa测试环节，直到修复、
	  develop分支的qa测试环节，会有多项目的联调问题，这个就比较麻烦，必须在qa环境解决
	
	4.qa测试结束，创建release分支进入yz环境，拉release分支前，本次发布的所有代码都在develop上；从develop拉release分支；进入yz环境测试，还有bug，仍然在开发分支修改后，合并到release分支测试
         	
	5.发布成功，线上测试通过，把线上的release分支合并到develop和master         




			   

跨项目工作流程：和上面一样，唯一要注意就是别把代码合并到develop，自测通过且下一个发布周期要发布自己的代码，再把代码合并到develop

线上bug修复流程：
	因为测试develop已经在开发了；release分支是线上代码对应分支，不能随便修改；所以需要从master拷贝一个bugfix分支，修复好代码以后上qa，qa测试通过以后
	以bugfix为基础创建一个最新的relase分支，把relase分支上线；

//常规check
合并release前check：查看代码大概改了哪些，是否包含自己的项目代码，自己是否误删了其他文件【最好公司有流程规范的软件，发布前有这么一个代码check流程】
发布前check：不管是修线上bug，还是qa分支测试完成后，只要是准备发布了，就得check中间是否有新项目上线，导致master分支更新了，如果有，就要重新rebase最新master，重新测试
发布后check：只要发布完，线上回归测试没问题，第一时间更新develop和master；




	

